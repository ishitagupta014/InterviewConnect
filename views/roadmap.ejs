<div style="background:url('https://media.istockphoto.com/id/1149011243/vector/horizontal-vector-illustration-of-an-empty-light-bluish-grey-grungy-textured-background.jpg?s=612x612&w=0&k=20&c=PBeWiCr8PlhqTcJMKkmvRwFVHmpcxMabI1jSVsoOH9U=') no-repeat; background-size: cover;">
  <button onclick='window.location.replace("/")' style="position:fixed; top:5px;
  left: 20px;"><i class="fa fa-home" aria-hidden="true"></i></button>

  <article class="markdown-body entry-content container-lg" itemprop="text" style="font-weight: bold;">
    
    <br>
    <h1 tabindex="-1" class=" display-1 text-uppercase" style="font-weight: 1000; font-size: 50px; justify-content: center; color: rgb(144, 58, 58); ">
      Placement-Preparation- Complete Roadmap
    </h1>

    <br />
   
    <h3 tabindex="-1" dir="auto">
      <a
        id="user-content-postbox-the-pdfs-added-above-consist-of-the-500-most-asked-questions-on-dsa-in-faang-interviews--topicwise"
        class="anchor"
        aria-hidden="true"
        ></a
      >
      The <a href="/500-question.pdf" style="color:blue;" downloadÂ >pdf</a> added above consist of the
      <em
        ><strong
          >500 Most asked questions on DSA in interviews-
          topicwise</strong
        ></em
      >
    </h3>
    <br />
   
    <h1 tabindex="-1" dir="auto">
      <a
        id="user-content--what-do-i-need-to-prepare-for-the-interviews"
        class="anchor"
        aria-hidden="true"
        href="#-what-do-i-need-to-prepare-for-the-interviews"
        ></a
      >
      >
      What do I need to prepare for the interviews?
    </h1>
    <p dir="auto">
      To get your dream company, you should be good in the following while
      facing an interview:
    </p>
    <p dir="auto">
      <g-emoji
        class="g-emoji"
        alias="blue_book"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png"
        >ðŸ“˜</g-emoji
      ><em><strong>Solid Data Structures and Algorithms.</strong></em> Deep
      understanding of these subjects, how to combine them, how to find/design
      suitable ones for a problem, etc. This is not surprising as indeed these
      are the most foundational topics on which much of CS rests.
    </p>
    <p dir="auto">
      <g-emoji
        class="g-emoji"
        alias="blue_book"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png"
        >ðŸ“˜</g-emoji
      ><em><strong>Strong in OOPS.</strong></em> OO Design and principles,
      subtle aspects of language, strong understanding of the language
      capability and limitations, its design and implementation.
    </p>
    <p dir="auto">
      <g-emoji
        class="g-emoji"
        alias="blue_book"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png"
        >ðŸ“˜</g-emoji
      ><em><strong>Good understanding of OS, DBMS, Networks.</strong></em> These
      subjects were highlighted whose understanding is extremely important on
      being a successful software engineer for high-end work.
    </p>
    <p dir="auto">
      <g-emoji
        class="g-emoji"
        alias="blue_book"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png"
        >ðŸ“˜</g-emoji
      ><em
        ><strong
          >Ability to write well structured and efficient code.</strong
        ></em
      >
      Ability to evaluate efficiency of the code at different levels â€“ algo, DS,
      execution level (OS), hardware to reduce memory as well as time;
      understanding of different layers of the system, and ability to
      evaluate/assess the program at these different layers. <br /><br /><br />
    </p>
    <h1 tabindex="-1" dir="auto">
      <a
        id="user-content--picking-a-language"
        class="anchor"
        aria-hidden="true"
        href="#-picking-a-language"
        ></a
      >
      >
      Picking a Language
    </h1>
    <p dir="auto">
      Before anything else, you need to pick a programming language to do your
      interviews in. When it comes to the programming interview
      preparation, itâ€™s important to choose one language to focus your
      prep on and get to know it very well. It takes some time for languages to
      master, and if you spend most of your time and resources on mastering
      algorithms, there's hardly any spare effort left to master a new language.
      If you are comfortable with using one of the mainstream languages, only
      for interviews, there is no good need to learn a new language.
      <br />
    </p>

      <em
        ><strong
          >Tip: Go for the language you are comfortable with, doing any kind of
          problem, solving things and writing code AND also please know about
          the internal functionalities as well and how different data structures
          are implemented in it.</strong
        ></em
      >
      <br /><br /><br />
   

    <h1 tabindex="-1" dir="auto">
      <a
        id="user-content---the-sequence-for-studying-data-structures-and-algorithms-should-be-as-follows"
        class="anchor"
        aria-hidden="true"
        href="#--the-sequence-for-studying-data-structures-and-algorithms-should-be-as-follows"
        ></a
      >
      >
      The sequence for studying Data Structures and Algorithms should be as
      follows:
    </h1>
    <p dir="auto">
        <ul>
            <li>Arrays & Matrix</li>
            <li>String</li>
            <li>Searching</li>
            <li>Sorting</li>
            <li>Hashing</li>
            <li>Stack</li>
            <li>Queue</li>
            <li>Linked List</li>
            <li>Recursion</li>
            <li>Backtracking</li>
            <li>Tree</li>
            <li>BST</li>
            <li>Heap or priority queue</li>
            <li>Graph</li>
            <li>Greedy</li>
            <li>Dynamic programming</li>
            <li>Greedy</li>
            <li>Trie</li>
            </ul>
    </p>
    <p>
        <img src="/problem-solving-dsa.png"  style="display: block;
        margin-left: auto;
        margin-right: auto;
        width: 65%;">
    </p>
    <br>
    <h1 tabindex="-1" dir="auto">
      <a
        id="user-content---technical-preparation-tips"
        class="anchor"
        aria-hidden="true"
        href="#--technical-preparation-tips"
        ></a
      >
      >
      Technical Preparation tips:
    </h1>
    <br />
    The main areas software engineers should prepare to succeed at interview at
    FAANG:<br />
    <p dir="auto">
      <g-emoji
        class="g-emoji"
        alias="green_book"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png"
        >ðŸ“—</g-emoji
      >
      <em><strong>Algorithm Complexity:</strong></em> It's fairly critical that
      you understand big-O complexity analysis. Again run some practice problems
      to get this down in application. <br /><br />
    </p>
    <p dir="auto">
      <g-emoji
        class="g-emoji"
        alias="green_book"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png"
        >ðŸ“—</g-emoji
      >
      <em><strong>Sorting:</strong></em> Know how to sort. Don't do bubble-sort.
      You should know the details of at least one n*log(n) sorting algorithm,
      preferably two (say, quicksort and merge sort). Merge sort can be highly
      useful in situations where quicksort is impractical, so take a look at it.
      <br /><br />
    </p>
    <p dir="auto">
      <g-emoji
        class="g-emoji"
        alias="green_book"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png"
        >ðŸ“—</g-emoji
      >
      <em><strong>Hashtables:</strong></em> Arguably the single most important
      data structure known to mankind. You absolutely should know how they work.
      Be able to implement one using only arrays in your favorite language, in
      about the space of one interview. <br /><br />
    </p>
    <p dir="auto">
      <g-emoji
        class="g-emoji"
        alias="green_book"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png"
        >ðŸ“—</g-emoji
      >
      <em><strong>Trees:</strong></em> Know about trees; basic tree
      construction, traversal and manipulation algorithms. Familiarize yourself
      with binary trees, n-ary trees, and trie-trees. Be familiar with at least
      one type of balanced binary tree, whether it's a red/black tree, a splay
      tree or an AVL tree, and know how it's implemented. <br />
      Understand tree traversal algorithms: BFS and DFS, and know the difference
      between inorder, postorder and preorder. <br /><br />
    </p>
    <p dir="auto">
      <g-emoji
        class="g-emoji"
        alias="green_book"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png"
        >ðŸ“—</g-emoji
      >
      <em><strong>Graphs:</strong></em> Graphs are really important. There are 3
      basic ways to represent a graph in memory (objects and pointers, matrix,
      and adjacency list); familiarize yourself with each representation and its
      pros &amp; cons. You should know the basic graph traversal algorithms:
      breadth-first search and depth-first search. Know their computational
      complexity, their tradeoffs, and how to implement them in real code. If
      you get a chance, try to study up on fancier algorithms, such as Dijkstra
      and A*. <br /><br />
      <g-emoji
        class="g-emoji"
        alias="green_book"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png"
        >ðŸ“—</g-emoji
      >
      <em><strong>Other data structures:</strong></em> You should study up on as
      many other data structures and algorithms as possible. You should
      especially know about the most famous classes of NP-complete problems,
      such as traveling salesman and the knapsack problem, and be able to
      recognize them when an interviewer asks you them in disguise. Find out
      what NP-complete means. <br /><br />
      <g-emoji
        class="g-emoji"
        alias="green_book"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png"
        >ðŸ“—</g-emoji
      >
      <em><strong>Mathematics:</strong></em> Some interviewers ask basic
      discrete math questions. This is more prevalent at Google than at other
      companies because we are surrounded by counting problems, probability
      problems, and other Discrete Math 101 situations. Spend some time before
      the interview refreshing your memory on (or teaching yourself) the
      essentials of combinatorics and probability. You should be familiar with
      n-choose-k problems and their ilk â€“ the more the better. <br /><br />
      <g-emoji
        class="g-emoji"
        alias="green_book"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png"
        >ðŸ“—</g-emoji
      >
      <em><strong>Operating Systems:</strong></em> Know about processes, threads
      and concurrency issues. Know about locks and mutexes and semaphores and
      monitors and how they work. Know about deadlock and livelock and how to
      avoid them. Know what resources a processes needs, and a thread needs, and
      how context switching works, and how it's initiated by the operating
      system and underlying hardware. Know a little about scheduling. The world
      is rapidly moving towards multi-core, so know the fundamentals of "modern"
      concurrency constructs. <br /><br />
      <g-emoji
        class="g-emoji"
        alias="green_book"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png"
        >ðŸ“—</g-emoji
      >
      <em><strong>Coding:</strong></em> You should know at least one programming
      language really well, and it should preferably be C++ or Java. C# is OK
      too, since it's pretty similar to Java. You will be expected to write some
      code in at least some of your interviews. You will be expected to know a
      fair amount of detail about your favorite programming language.
      <br /><br /><br />
    </p>
    <h2 tabindex="-1" dir="auto">
        Some Extra Tips
      </h2>
      <ul>
        <li>
           
Practicing DSA problem-solving skills on paper or a whiteboard can be really helpful. Visualizing solutions, creating pseudo-codes, and outlining the steps of your algorithms can help you design more efficient and effective solutions. Using paper or a whiteboard is great because it allows you to easily sketch out your ideas and make changes as needed.
After designing pseudo-code, we should work to translate it into actual code using the programming language of your choice. It's also important to thoroughly test your code using a variety of input and output data, edge cases, and boundary conditions to make sure it's working correctly. We need to think:
<br>
<ol>
    <li>Does the code produce correct output for all possible inputs?</li>
<li>Can we optimize the code further? It's always a good idea to improve efficiency of your code. If you have time, take another look at the solution and see if there's a better way to implement it.</li>
<li>How can we improve the code readability? Making sure your code is well-organized and easy to understand is important for you and anyone else who might need to read and maintain itÂ inÂ theÂ future.</li>
</ol>
        </li>
        <li>Knowing the answer to a question is one thing but to clear an interview is another. Interviews test your ability to think on the spot. There has to be a gradual sequence compelling the interviewer that interviewee can think of a solution to the problem thrown at him. Generally, you should proceed like you are teaching someone. Proceed from O(n^2) -> O(n) -> O(log(n)) or adapting to current question.</li>
      </ul>
    
    <h2 tabindex="-1" dir="auto">
      <a
        id="user-content-beginner-coding-practice"
        class="anchor"
        aria-hidden="true"
        href="#beginner-coding-practice"
        ></a
      >
      Coding Practice
    </h2>
    <p dir="auto">
      <g-emoji
        class="g-emoji"
        alias="ledger"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d2.png"
        >ðŸ“’</g-emoji
      >
      <a href="https://leetcode.com/" rel="nofollow">LeetCode</a> (Go to
      Problems -&gt; Algorithms)<br />
      <g-emoji
        class="g-emoji"
        alias="ledger"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d2.png"
        >ðŸ“’</g-emoji
      >
      <a
        href="https://practice.geeksforgeeks.org/explore/?page=1"
        rel="nofollow"
        >GeeksForGeeks</a
      ><br />
      <g-emoji
        class="g-emoji"
        alias="ledger"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d2.png"
        >ðŸ“’</g-emoji
      >
      <a href="https://www.hackerrank.com/" rel="nofollow">Hackerrank</a>
    </p>
    <h2 tabindex="-1" dir="auto">
      <a
        id="user-content-beginner-general-interview-prep"
        class="anchor"
        aria-hidden="true"
        href="#beginner-general-interview-prep"
        ></a
      >
      General Interview Prep
    </h2>
    <p dir="auto">
      <g-emoji
        class="g-emoji"
        alias="books"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png"
        >ðŸ“š</g-emoji
      >
      <a href="https://www.geeksforgeeks.org/" rel="nofollow">GeeksforGeeks</a>
      <br />
      <g-emoji
        class="g-emoji"
        alias="books"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png"
        >ðŸ“š</g-emoji
      >
      <a href="http://highscalability.squarespace.com/" rel="nofollow"
        >High Scalability</a
      >
      <br />
      <g-emoji
        class="g-emoji"
        alias="books"
        fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png"
        >ðŸ“š</g-emoji
      >
      <a href="https://www.geeksforgeeks.org/category/puzzles/" rel="nofollow"
        >Interview Puzzles</a
      >
      
    </p>
    
  </article>
</div>
